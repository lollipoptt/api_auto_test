{
  "uid" : "acdc9cdb92d1e214",
  "name" : "test_timestamp[20190501-2019-6-30-False]",
  "fullName" : "test_case.test_postman_api#test_timestamp",
  "historyId" : "07ba5d33e432443ccd6a8a86d035dbf1",
  "time" : {
    "start" : 1594284492935,
    "stop" : 1594284494039,
    "duration" : 1104
  },
  "description" : "\n    用例描述：测试不同的timestamp和target\n    ",
  "descriptionHtml" : "<pre><code>用例描述：测试不同的timestamp和target\n</code></pre>\n",
  "status" : "failed",
  "statusMessage" : "AssertionError: assert 'True' == 'False'\n  - False\n  + True",
  "statusTrace" : "timestamp = '20190501', target = '2019-6-30', expected = 'False', env_config = {'host': {'url': 'https://postman-echo.com/time/before'}}\n\n    @allure.feature('postman')\n    @allure.story('postman-api')\n    @pytest.mark.parametrize('timestamp,target,expected',test_data)\n    def test_timestamp(timestamp,target,expected,env_config):\n        \"\"\"\n        用例描述：测试不同的timestamp和target\n        \"\"\"\n        #从yml配置文件获取url\n        url = env_config['host']['url']\n        payload = {'timestamp':timestamp,'target':target}\n        r = requests.get(url,params=payload)\n        print(r.url)\n        result = r.json()\n>       assert str(result['before'])==expected\nE       AssertionError: assert 'True' == 'False'\nE         - False\nE         + True\n\ntest_case\\test_postman_api.py:28: AssertionError",
  "flaky" : false,
  "newFailed" : false,
  "beforeStages" : [ {
    "name" : "env_config",
    "time" : {
      "start" : 1594284478466,
      "stop" : 1594284478470,
      "duration" : 4
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "stepsCount" : 0,
    "hasContent" : false
  } ],
  "testStage" : {
    "description" : "\n    用例描述：测试不同的timestamp和target\n    ",
    "status" : "failed",
    "statusMessage" : "AssertionError: assert 'True' == 'False'\n  - False\n  + True",
    "statusTrace" : "timestamp = '20190501', target = '2019-6-30', expected = 'False', env_config = {'host': {'url': 'https://postman-echo.com/time/before'}}\n\n    @allure.feature('postman')\n    @allure.story('postman-api')\n    @pytest.mark.parametrize('timestamp,target,expected',test_data)\n    def test_timestamp(timestamp,target,expected,env_config):\n        \"\"\"\n        用例描述：测试不同的timestamp和target\n        \"\"\"\n        #从yml配置文件获取url\n        url = env_config['host']['url']\n        payload = {'timestamp':timestamp,'target':target}\n        r = requests.get(url,params=payload)\n        print(r.url)\n        result = r.json()\n>       assert str(result['before'])==expected\nE       AssertionError: assert 'True' == 'False'\nE         - False\nE         + True\n\ntest_case\\test_postman_api.py:28: AssertionError",
    "steps" : [ ],
    "attachments" : [ {
      "uid" : "ff8e145b715b4ed8",
      "name" : "stdout",
      "source" : "ff8e145b715b4ed8.txt",
      "type" : "text/plain",
      "size" : 73
    } ],
    "parameters" : [ ],
    "attachmentsCount" : 1,
    "shouldDisplayMessage" : true,
    "stepsCount" : 0,
    "hasContent" : true
  },
  "afterStages" : [ ],
  "labels" : [ {
    "name" : "story",
    "value" : "postman-api"
  }, {
    "name" : "feature",
    "value" : "postman"
  }, {
    "name" : "parentSuite",
    "value" : "test_case"
  }, {
    "name" : "suite",
    "value" : "test_postman_api"
  }, {
    "name" : "subSuite"
  }, {
    "name" : "host",
    "value" : "SW-CNJJ-WDP012L"
  }, {
    "name" : "thread",
    "value" : "52004-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "package",
    "value" : "test_case.test_postman_api"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ {
    "name" : "expected",
    "value" : "'False'"
  }, {
    "name" : "target",
    "value" : "'2019-6-30'"
  }, {
    "name" : "timestamp",
    "value" : "'20190501'"
  } ],
  "links" : [ ],
  "hidden" : false,
  "retry" : false,
  "extra" : {
    "severity" : "normal",
    "retries" : [ ],
    "categories" : [ {
      "name" : "Product defects",
      "matchedStatuses" : [ ],
      "flaky" : false
    } ],
    "tags" : [ ]
  },
  "source" : "acdc9cdb92d1e214.json",
  "parameterValues" : [ "'False'", "'2019-6-30'", "'20190501'" ]
}